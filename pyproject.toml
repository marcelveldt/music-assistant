[build-system]
requires = ["setuptools~=62.3", "wheel~=0.37.1"]
build-backend = "setuptools.build_meta"

[project]
name = "music_assistant"
# The version is set by GH action on release
version = "0.0.0"
license     = {text = "Apache-2.0"}
description = "Music Assistant"
readme = "README.md"
requires-python = ">=3.11"
authors     = [
    {name = "The Music Assistant Authors", email = "marcelveldt@users.noreply.github.com"}
]
classifiers = [
  "Environment :: Console",
  "Programming Language :: Python :: 3.11",
]
dependencies = [
  "aiohttp",
  "orjson",
  "mashumaro"
]

[project.optional-dependencies]
server = [
  "faust-cchardet>=2.1.18",
  "aiodns>=3.0.0",
  "Brotli>=1.0.9",
  "aiohttp==3.9.2",
  "asyncio-throttle==1.0.2",
  "aiofiles==23.2.1",
  "aiorun==2023.7.2",
  "colorlog==6.8.2",
  "aiosqlite==0.19.0",
  "python-slugify==8.0.1",
  "mashumaro==3.12",
  "memory-tempfile==2.2.3",
  "music-assistant-frontend==2.1.2",
  "pillow==10.2.0",
  "unidecode==1.3.8",
  "xmltodict==0.13.0",
  "orjson==3.9.12",
  "shortuuid==1.0.11",
  "zeroconf==0.131.0",
  "cryptography==41.0.7",
  "ifaddr==0.2.0",
  "uvloop==0.19.0"
]
test = [
  "black==24.1.1",
  "codespell==2.2.6",
  "isort==5.13.2",
  "mypy==1.8.0",
  "pre-commit==3.6.0",
  "pre-commit-hooks==4.5.0",
  "pylint==3.0.3",
  "pytest==7.4.4",
  "pytest-aiohttp==1.0.5",
  "ruff==0.2.1",
  "safety==3.0.1"
]

[project.scripts]
mass = "music_assistant.__main__:main"

[tool.codespell]
ignore-words-list = "provid,hass,followings"

[tool.setuptools]
platforms = ["any"]
zip-safe  = false
packages = ["music_assistant"]
include-package-data = true

[tool.setuptools.package-data]
music_assistant = ["py.typed"]

[tool.ruff]
fix = true
show-fixes = true

line-length = 100
target-version = "py311"


[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "pep257"

[tool.ruff.lint.pylint]

max-branches=25
max-returns=15
max-args=10
max-statements=50


[tool.mypy]
platform = "linux"
python_version = "3.11"

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pylint.MASTER]
extension-pkg-whitelist = [
  "orjson",
]
ignore = [
  "tests",
]

[tool.pylint.BASIC]
good-names = [
  "_",
  "id",
  "on",
  "Run",
  "T",
]

[tool.pylint.DESIGN]
max-attributes = 8

[tool.pylint."MESSAGES CONTROL"]
disable = [
  "duplicate-code",
  "format",
  "unsubscriptable-object",
  "unused-argument", # handled by ruff
  "unspecified-encoding", # handled by ruff
  "fixme", # we're still developing
]

[tool.pylint.SIMILARITIES]
ignore-imports = true

[tool.pylint.FORMAT]
max-line-length = 100

[tool.pytest.ini_options]
addopts = "--cov"
asyncio_mode = "auto"

[tool.ruff.lint]
ignore = [
  "ANN101", # Self... explanatory
  "ANN401", # Opinioated warning on disallowing dynamically typed expressions
  "D203", # Conflicts with other rules
  "D213", # Conflicts with other rules
  "D417", # False positives in some occasions
  "FIX002", # Just annoying, not really useful
  "PLR2004", # Just annoying, not really useful
  "S101", # assert is often used to satisfy type checking
  "TD002", # Just annoying, not really useful
  "TD003", # Just annoying, not really useful

  # Conflicts with the Ruff formatter
  "COM812",
  "ISC001",
]

select = ["ALL"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
known-first-party = ["music_assistant"]

[tool.ruff.lint.mccabe]
max-complexity = 25
